@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="zh-CN">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width">
      
        <title>界面</title>
		<link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
        <link rel="stylesheet" href="http://122.114.38.213:8080/arcgis_js_api/library/3.17/3.17/dijit/themes/claro/claro.css">
    	<link rel="stylesheet" href="http://122.114.38.213:8080/arcgis_js_api/library/3.17/3.17/esri/css/esri.css">
        <link  href="~/themes/Site.css" rel="stylesheet"/>
	    
		<link href="~/themes/menu.css" rel="stylesheet" />
		<script src="~/Scripts/jquery-3.2.1.min.js"></script>
		<script src="~/Scripts/vue.js"></script>
		<script src="~/Scripts/vue-resource.js"></script>
		<script src="~/Scripts/bootstrap.min.js"></script>
		<script type="text/javascript" src="http://122.114.38.213:8080/arcgis_js_api/library/3.17/3.17/init.js"></script>
		<script type="text/javascript"  src="~/Scripts/json2.js"></script>
        <script src="~/Scripts/QyTech/nav4.js"></script>
        <script src="~/Scripts/QyTech/Sonic.js"></script>
          <script src="~/Scripts/QyTech.js"></script>
         
		<!--<script type="text/javascript" src="/js/Qytech/myArc.js"></script>-->
       <style> 
           .layerdisp{
                background-color:#33ffcc !important;
                z-index :200;
            }
           .layernodisp{
                background-color:yellow;
                   z-index :200;
            }
           .retPosBtn{
                background-Image:url('/td_gis/themes/imgs/retPos.jpg');
                z-index :200;
            }
            .retPosBtnLocal{
                background-Image:url('/themes/imgs/retPos.jpg');
                z-index :200;
            }
         </style>
	<script>
	    var WebServer = '';
	    var jpgForDitu = '';
	    //console.log(window.location.host);
	    //矢量图
	    //var MapServer = 'http://122.114.38.213/arcgis/rest/services/WTMap/TD_SpatialServerTest/MapServer';
	    var MapServer = 'http://122.114.38.213/arcgis/rest/services/WTMap/WD_SpatialServerTest/MapServer';
	    var VectorLayer;
	    //栅格图
	    var GridMapServer = 'http://122.114.38.213/arcgis/rest/services/WTMap/WTService/MapServer';
	    var GridLayer;

	    var LoginUserName = 'admin';
	    var bsUser = {};
	    var bsUserRightCode = ''

	    var map;
	    var setLayers;
	    var CurrLayerName;
	    var Djlayers = [];
	    var CurrPosition;

	    //规则：所有菜单项和按钮项都给定统一的编号规则，方便将来统一处理相互关系
	    // 101:镇查询 102：村查询 
	    //叠加，查询合成一个：单击叠加或取消，叠加则自动设为查询编辑状态
	    //301：历年批次查询 302：城市规划查询 303 土地现状查询 304 房屋建筑查询
	    //401：企业查询定位
	    var CurrFunItem = 303;
	    var bolClickMap = true;//默认土地现状查询
	    var IsReCenter = false;


	    var VectorVisibleLayerDefault = [];
	    VectorVisibleLayerDefault.push(0);
	    VectorVisibleLayerDefault.push(1);
	    VectorVisibleLayerDefault.push(2);
	    //VectorVisibleLayerDefault.push(6);//parent
	    //VectorVisibleLayerDefault.push(11);//parent
	    VectorVisibleLayerDefault.push(3);
	    VectorVisibleLayerDefault.push(4);
	    VectorVisibleLayerDefault.push(5);
	    VectorVisibleLayerDefault.push(6);
	    VectorVisibleLayerDefault.push(8);
	    //VectorVisibleLayerDefault.push(19);//parent

	    var DefaultExtent = [];//33100, 53879, 41386, 60000
	    //DefaultExtent.push(35577.02860271136);
	    //DefaultExtent.push(49275.026826949485);
	    //DefaultExtent.push(45262.763427558224);
	    //DefaultExtent.push(62173.590764428474);
	    DefaultExtent.push(28245.39075545266);
	    DefaultExtent.push(60331.963060127855);
	    DefaultExtent.push(42913.92009251133);
	    DefaultExtent.push(66983.60136340446);


	    var VectorVisibleLayer = VectorVisibleLayerDefault.concat([]);
	    VectorVisibleLayer.push(20);

	    var GridVisibleLayerDisp = false;
	    Djlayers.push('土地现状');


	    function GetGridMapAddrByOrgCode(orgcode) {
	        if (orgcode.length >= 12) {//320507100001
	            return 'http://122.114.38.213/arcgis/rest/services/wd/cun' + orgcode + '/MapServer';
	        }
	        else {
	            return 'http://122.114.38.213/arcgis/rest/services/WTMap/WTService/MapServer';
	        }
	    }

	    function Layer(LayerName, EditView, QueryFName, LayerQueryIndex, FunId) {
	        var olayer = new Object;
	        olayer.LayerName = LayerName;
	        olayer.EditView = EditView;
	        olayer.QueryFName = QueryFName;
	        olayer.LayerQueryIndex = LayerQueryIndex;
	        olayer.FunId = FunId;
	        return olayer;
	    }

	    var zjLayer = Layer("镇界", "", "行政镇代码", 0, 101);
	    var cjLayer = Layer("村界", "", "行政村代码", 1, 102);
	    var tdxzLayer = Layer("土地现状", "tdxzWebView", "地块编码", 20, 201);
	    var tdghLayer = Layer("土地规划", "tdghWebView", "地块编号", 11, 202);
	    var csghLayer = Layer("城市规划", "csghWebView", "地块编码", 7, 203);
	    var lnpcLayer = Layer("历年批次", "lnpcWebView", "地块编码", 4, 204);
	    var fwjzLayer = Layer("房屋建筑", "fwjzWebView", "建筑编号", 5, 205);

	    var dic_Layer = new Array();
	    dic_Layer['镇界'] = zjLayer;
	    dic_Layer['村界'] = cjLayer;
	    dic_Layer['土地现状'] = tdxzLayer;
	    dic_Layer['土地规划'] = tdghLayer;
	    dic_Layer['城市规划'] = csghLayer;
	    dic_Layer['历年批次'] = lnpcLayer;
	    dic_Layer['房屋建筑'] = fwjzLayer;

	    var dic_LayerDjBtn = new Array();
	    dic_LayerDjBtn['土地现状'] = 'btnTdxz';
	    dic_LayerDjBtn['土地规划'] = 'btnTdgh';
	    dic_LayerDjBtn['城市规划'] = 'btnCsgh';
	    dic_LayerDjBtn['历年批次'] = 'btnLnpc';
	    dic_LayerDjBtn['房屋建筑'] = 'btnFw';
	    dic_LayerDjBtn['影像'] = 'btnYx';


	    // var dic_Menu2ServerAddr=new Array();
	    // dic_Menu2ServerAddr['101']=WebServer+'/showview/resultview';
	    // dic_Menu2ServerAddr['102']=WebServer+'/showview/resultview';

	    function QueryLayerInfo(LayerName, ObjCode) {
	        var olayer = new Object;
	        olayer.LayerName = LayerName;
	        olayer.ObjCode = ObjCode;
	        return olayer;
	    }
	    function DjLayerAddrConf(LayerName, Layerindexs) {
	        var olayer = new Object;
	        olayer.LayerName = LayerName;
	        olayer.Layerindexs = Layerindexs;
	        return olayer;
	    }
	    function initMap(orgcode) {
	        require([
				"esri/map",
                'esri/geometry/Extent',
				"esri/layers/ArcGISDynamicMapServiceLayer",
               // "esri/layers/ArcGISTiledMapServicelayer",
               "esri/layers/FeatureLayer",
               	"esri/layers/ImageParameters",
				"esri/dijit/OverviewMap",
				"dojo/parser", "dojo/dom",
                 "esri/InfoTemplate",
				"dijit/layout/BorderContainer",//?
				"dijit/layout/ContentPane",//?
				"esri/tasks/FindTask",
				"esri/tasks/FindParameters",
				"esri/tasks/query",
				"esri/tasks/IdentifyTask",
				"esri/tasks/IdentifyParameters",
				"esri/toolbars/draw",
                "esri/symbols/SimpleMarkerSymbol",
				"esri/symbols/SimpleFillSymbol",
				"esri/symbols/SimpleLineSymbol",
                "esri/tasks/GenerateRendererParameters",
                "esri/renderers/UniqueValueRenderer",
                "esri/renderers/ClassBreaksRenderer",
                "esri/renderers/SimpleRenderer",
				"esri/graphic",
				"dojo/colors",
                "esri/geometry/webMercatorUtils",
				"dojo/domReady!"
	        ],
				function (Map, Extent, ArcGISDynamicMapServiceLayer, FeatureLayer, ImageParameters, OverviewMap, parser
						, on
						, dom
                        , InfoTemplate
						, IdentifyTask, IdentifyParameters
						, draw, SimpleMarkerSymbol, SimpleFillSymbol, SimpleLineSymbol, GenerateRendererParameters, UniqueValueRenderer, ClassBreaksRenderer, SimpleRenderer, Graphic, Color
                        ,webMercatorUtils
                        ) {
				    //parser.parse();
				    //var options = { logo: false, center: [35775.71034270822, 59792.31742212466], zoom: 8 }; //var MyMap = new esri.Map(mapContainer, options);
				    var options = { logo: false };
				    map = new Map("map", options);



				    VectorLayer = new ArcGISDynamicMapServiceLayer(MapServer);
				    map.addLayer(VectorLayer, 1);


				    //GridMapServer = GetGridMapAddrByOrgCode('');
				    GridMapServer = GetGridMapAddrByOrgCode(orgcode);
				    GridLayer = new ArcGISDynamicMapServiceLayer(GridMapServer);
				    map.addLayer(GridLayer, 0);

				    //setLayers(VectorLayer,VectorVisibleLayer);
				    setLayers(GridLayer, []);

				    //添加要素图层  
				    var featureLayer = new FeatureLayer(MapServer + '/1', {
				        //注意这里的mode一定要指定MODE_SNAPSHOT，否则每次放大或缩小或者是平移都会执行FeatureLayer的update-end操作
				        mode: FeatureLayer.MODE_SNAPSHOT,
				        outFields: ["*"],
				        infoTemplate: InfoTemplate,
				        hasAttributionData: true
				    });
				    featureLayer.setDefinitionExpression("行政村代码 = '320507100204'");
				    map.addLayer(featureLayer, 1);



				    //定义一个render对FeatureLayer自定义的数据进行渲染
				    // var renderer = new SimpleRenderer(new SimpleFillSymbol().setOutline(new SimpleLineSymbol().setWidth(0.1).setColor(new Color([128, 128, 128]))));
				    //renderer.setColorInfo({
				    //    //使用nico属性进行渲染
				    //    field: "nico",
				    //    minDataValue: 0,
				    //    maxDataValue: 40,
				    //    colors: [
				    //        new Color([0, 255, 0]),
				    //        new Color([255, 0, 0])
				    //    ]
				    //});
				    //featureLayer.on("update-end", function () {
				    //    //输出其中一个graphic(面要素)的所有属性
				    //    for (var i = 0; i < featureLayer.graphics.length; i++) {
				    //        //自定义数据，在每个面要素中添加nico属性
				    //        featureLayer.graphics[i].attributes["nico"] = i;
				    //    }
				    //    featureLayer.setRenderer(renderer);
				    //    featureLayer.redraw();
				    //    //输出FeatureLayer中所有的graphic数
				    //    console.log("number of graphics in featureLayer:" + featureLayer.graphics.length);
				    //    //输出其中一个graphic(面要素)的所有属性
				    //    console.log("10th graphic attributes in featureLayer:");
				    //    console.log(featureLayer.graphics[10].attributes);
				    //});



				    map.on("click", mapClick);
				    map.on("MouseMove", showCoordinates);
				    map.on("extent-change", showExtent);
				    //VectorLayer.on("onLoad", LoadList);
				    dojo.connect(VectorLayer, "onLoad", LoadList);

				}
			);
	    }



	    function LoadList(layers) {
	        var html = ""
	        //获取地图服务中的子图层对象数组，该对象包含子图层的基本信息，不包含属性信息  
	        var infos = layers.layerInfos;
	        //分别处理每个信息对象  
	        for (var i = 0, length = infos.length; i < length; i++) {
	            var info = infos[i];
	            //获取图层默认显示情况，如默认为true显示的话就把图层id添加到visible数组中    
	            if (info.defaultVisibility) {
	                visible.push(info.id);
	            }
	            //输出图层列表的html    
	            html = html +
                        "<div><input id='" + info.id + "' name='layerList' class='listCss' type='checkbox' value='checkbox' " +
                        "onclick='<span style=" + '"color:#FF6666;"' + ">setLayerVisibility()</span>' " + (info.defaultVisibility ? "checked" : "") + " />" + info.name + "</div>";
	        }
	        //设置可视图层    
	        layer.setVisibleLayers(visible);
	        //在右边显示图层名列表    
	        dojo.byId("divInMap").innerHTML = html;
	    }

	    //关联checkbox的click事件  
	    setLayerVisibility = function () {
	        //用dojo.query获取css为listCss的元素数组    
	        var inputs = dojo.query(".listCss");
	        //清空数组   
	        visible = [];
	        //对checkbox数组进行变量把选中的id添加到visible    
	        for (var i = 0; i < inputs.length; i++) {
	            if (inputs[i].checked) {
	                visible.push(inputs[i].id);
	            }
	        }
	        //设置可视图层    
	        layer.setVisibleLayers(visible);
	    }

	    function FilterLayerDisp(Url, filter) {
	        var layerDefinitions = [];//定义过滤条件  
	        //过滤5个图层  
	        layerDefinitions[0] = "NAME_ = '11'";
	        layerDefinitions[1] = "NAME_ = '高区' or NAME_ = '环翠区'";
	        layerDefinitions[2] = "NAME_ = '0002'";
	        layerDefinitions[3] = "NAME_ = '0002'";
	        layerDefinitions[4] = "NAME_ = '0002'";
	        layer1.setLayerDefinitions(layerDefinitions);//开始过滤  
	    }

	    function showCoordinates(evt) {
	        return;
	        //从事件中获取mapPoint
	        var mp = evt.mapPoint;
	        //显示鼠标坐标
	        console.log(mp.x + "," + mp.y);
	    }
	    function showExtent(ext) {
	        var extentString = "";

	        var mapCenter = map.extent.getCenter();
	        //var mapZoom=map.extent.z

	        extentString = "XMin: " + ext.extent.xmin +
              " YMin: " + ext.extent.ymin +
              " XMax: " + ext.extent.xmax +
              " YMax: " + ext.extent.ymax +
              " Center: " + mapCenter.x + "," + mapCenter.y +
	        "SR:" + ext.extent.spatialReference.wkt;
	        console.log(extentString);


	        var currRange = [];
	        currRange.push(ext.extent.xmin);
	        currRange.push(ext.extent.ymin);
	        currRange.push(ext.extent.xmax);
	        currRange.push((ext.extent.ymax + '').substring(0, 14));
	        //if (isNaN(ext.extent.ymin) || isNaN(ext.extent.ymax)) {
	        //    console.log('y is NaN is not valid');
	        //    return;
	        //}


	        //if (isNaN(currRange[0]) || isNaN(currRange[1]) || isNaN(currRange[2]) || isNaN(currRange[3])) {
	        //    console.log('NaN is not valid');
	        //    //var startExtent = new esri.geometry.Extent(DefaultExtent[0], DefaultExtent[1], DefaultExtent[2], DefaultExtent[3], map.spatialReference);
	        //    //map.setExtent(startExtent);
	        //}
	        //else {
	        //    //if (!(ext.extent.xmin == DefaultExtent[0] && ext.extent.ymin == DefaultExtent[1] && ext.extent.xmax == DefaultExtent[2] && ext.execute.yma == DefaultExtent[3])) {
	        //    //各种设备高宽比里不定，只考虑宽度即可
	        //    if (!(currRange[0] == DefaultExtent[0] && currRange[2] == DefaultExtent[2])) {
	        //        var val = currRange[0] + "," + currRange[1] + "," + currRange[2] + "," + currRange[3];
	        //        setCookie("mapextent", val);
	        //        console.log('set cookie:' + val);
	        //    }
	        //}
	        //var strExtent = getCookie("mapextent");//('mapextent');
	        //console.log('query cookie:'+strExtent);

	    }

	    setLayers = function (layer, vis) {
	        layer.setVisibleLayers(vis);
	    }

	    //图层显示控制
	    function btnDispLayer(btnid, LayerName) {
	        bolClickMap = false;
	        DispLayer(btnid, LayerName);
	    }

	    function DispLayer(btnid, LayerName) {


	        //处理叠加
	        var LayerFwDisp = null
	        if (LayerName == '影像') {
	            GridVisibleLayerDisp = !GridVisibleLayerDisp;
	            if (GridVisibleLayerDisp == true) {
	                setLayers(GridLayer, [0]);
	                $("#" + btnid).attr("class", "btn btn-default layerdisp");
	            }
	            else {
	                setLayers(GridLayer, []);
	                $("#" + btnid).attr("class", "btn btn-default layernodisp");
	            }
	        }
	        else {
	            if (LayerName == '房屋建筑') {
	                if (HaveValueInArray(dic_Layer[LayerName].LayerQueryIndex) == false) {
	                    LayerFwDisp = true;
	                    $("#" + btnid).attr("class", "btn btn-default layerdisp");

	                }
	                else {
	                    LayerFwDisp = false;
	                    $("#" + btnid).attr("class", "btn btn-default layernodisp");
	                }
	            }
	            else {
	                //矢量量叠加相关显示图层
	                if (Djlayers.contains(LayerName) == true) {
	                    Djlayers.remove(LayerName);
	                    $("#" + btnid).attr("class", "btn btn-default layernodisp");
	                }
	                else {
	                    Djlayers.push(LayerName);
	                    $("#" + btnid).attr("class", "btn btn-default layerdisp");
	                }
	            }
	        }



	        //然后处理整个叠加，并控制数据的显示
	        VectorVisibleLayer = VectorVisibleLayerDefault;
	        if (LayerFwDisp == true) {
	            VectorVisibleLayer.push(dic_Layer[LayerName].LayerQueryIndex);
	        }
	        else if (LayerFwDisp == false) {
	            VectorVisibleLayer.pop(dic_Layer[LayerName].LayerQueryIndex);
	        }

	        var djindex = getDjLayers();
	        VectorVisibleLayer = VectorVisibleLayer.concat(djindex);
	        setLayers(VectorLayer, VectorVisibleLayer);
	        //更改按钮css，显示方式，显示则为黄色，否则为蓝色
	        //for (var lname in dic_LayerDjBtn) {
	        //    if (lname == LayerName) {
	        //        $(btnid).css("","")
	        //    }
	        //}

	    }
	    function HaveValueInArray(val) {
	        for (i in VectorVisibleLayer) {
	            v = VectorVisibleLayer[i];
	            if (v == val) {
	                return true;
	            }
	        }
	        return false;
	    }


	    function mapClick(e) {
	        if (bolClickMap == false) {
	            return;
	        }
	        //获得用户点击的地图坐标
	        var point = e.mapPoint;

	        //实例化查询参数
	        var query = new esri.tasks.Query();
	        query.geometry = point;
	        query.outFields = ["*"];
	        query.outSpatialReference = map.spatialReference;
	        query.spatialRelationship = esri.tasks.Query.SPATIAL_REL_INTERSECTS;
	        query.returnGeometry = true;
	        //实例化查询对象

	        var queryTask = new esri.tasks.QueryTask("http://122.114.38.213/arcgis/rest/services/WTMap/TD_SpatialServerTest/MapServer/" + dic_Layer[CurrLayerName].LayerQueryIndex);
	        //进行查询                                
	        queryTask.execute(query, showFindResult)

	    }

	    function showFindResult(queryResult) {
	        if (queryResult.features == 0) {
	            alert("没有该元素");
	            return;
	        }
	        try {
	            for (var i = 0; i < queryResult.features.length; i++) {
	                var feature = queryResult.features[0];
	                //定义高亮图形的符号
	                //1.定义面的边界线符号
	                var outline = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 3);
	                //2.定义面符号 
	                var PolygonSymbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, outline, new dojo.Color([0, 255, 0, 1]));

	                var graphic = new esri.Graphic();


	                //创建客户端图形
	                graphic.setGeometry(feature.geometry);
	                //设置查询到的graphic的显示样式  
	                graphic.setSymbol(PolygonSymbol);

	                map.graphics.clear();
	                //var graphic = new Graphic(geometry, PolygonSymbol);
	                //将客户端图形添加到map中
	                map.graphics.add(graphic);

	                //setTimeout(function (map) {
	                //    map.graphics.clear();
	                //}, 1000);


	            }
	        }
	        catch (e) {
	            alert(e);
	        }

	        if (CurrFunItem.substring(0, 1) == '1') {
	            var feature = queryResult.features[0];
	            var geometry = feature.geometry;
	            var dkcode = feature.attributes[dic_Layer[CurrLayerName].QueryFName];
	            SpatialQuery(CurrLayerName, dkcode)
	        }
	        else if (CurrFunItem.substring(0, 1) == '4') {
	            var feature = queryResult.features[0];
	            var geometry = feature.geometry;
	            var dkbm = feature.attributes[dic_Layer[CurrLayerName].QueryFName];
	            var url = WebServer + "/EditView/" + dic_Layer[CurrLayerName].EditView + "?id=" + dkbm;
	            ShowUrl(url);
	        }

	    }
	    function SpatialQuery(LayerName, ObjCode) {

	        //var json = eval('(' + str + ')');
	        var objStr = QueryLayerInfo(LayerName, ObjCode);
	        //var strjson=objStr.toJSONString();
	        var strjson = JSON.stringify(objStr);
	        var url = WebServer + "/showview/resultview?json=" + strjson;

	        ShowUrl(url);
	    }

	    function btnReturn() {
	        history.go(-1);
	        //$("#div3th").hide();
	        //$("#LtdPos").hide();
	        $("#container").show();
	    }
	    function ShowUrl(url) {

	        //location.href = url;

	        $("#divLoadPage").modal({
	            remote: url
	        });
	        $("#divLoadPage").modal("show");
	        //$("#container").hide();

	    }


	    //处理功能项菜单
	    function MenuClick(FunItem, LayerName) {
	        $("#FunGroup1").attr("class", "off");
	        $("#FunGroup4").attr("class", "off");

	        bolClickMap = false;
	        CurrFunItem = FunItem;
	        if (FunItem == 104) {
	            //设置透明度
	            alert('设置透明度');
	            ShowSettingTransModel();
	        }
	        else if (FunItem == 105) {
	            alert('关闭核查，现实原来的图层');
	            VectorVisibleLayer = VectorVisibleLayerDefault();
	            setLayers(VectorLayer, VectorVisibleLayer);

	        }
	        else if (FunItem.substring(0, 1) == 1) {
	            //bolClickMap = true;
	            //CurrLayerName = '村界';
	            //图层显示控制
	            LtdCheckControl(FunItem);
	        }
	        else if (FunItem == 301) {//企业定位
	            SetPosVisible(true);
	        }
	        else if (FunItem.substring(0, 1) == 4) {
	            bolClickMap = true;
	            CurrLayerName = LayerName;
	            $("#FunGroup4").attr("class", "off");

	            ////如果该图层没有加载，则加载
	            if (!Djlayers.contains(CurrLayerName)) {
	                alert('该图层还没有显示，请先叠加图层!');
	                //    if (LayerName=="土地现状"){
	                //        DispLayer("btnTdxz", LayerName)}
	                //    else if (LayerName=="房屋建筑"){
	                //        DispLayer("btnFw", LayerName)}
	                //    else if (LayerName=="历年批次"){
	                //        DispLayer("btnLnpc", LayerName)}
	                //    else if (LayerName=="城市规划"){
	                //        DispLayer("btnCsgh", LayerName)}

	                //    //VectorVisibleLayer.push(dic_Layer[CurrLayerName].LayerQueryIndex);
	                //    //setLayers(VectorLayer, VectorVisibleLayer);
	            }
	        }
	    }

	    function LtdCheckControl(id) {
	        var djindex = [];
	        if (id == 101){
	            djindex = [15, 16, 17];
	        }
	        else if (id == 102) {
	            djindex = [18, 19];
	        }
	        else if (id == 103) {
	            djindex = [20,21];
	        }
	        
	        VectorVisibleLayer = VectorVisibleLayer.concat(djindex);
	        setLayers(VectorLayer, VectorVisibleLayer);
	        
	    }

	    //定位界面显示
	    function SetPosVisible(posvisible) {
	        $("#LtdTable tr:gt(0)").remove();
	        $("#ltdname").val('');

	        if (posvisible == true) {
	            $("#LtdPos").show();
	            $("#container").hide();
	        }
	        else {
	            $("#LtdPos").hide();
	            $("#container").show();
	        }

	    }
	    //初始位置
	    function InitPosition(flag) {
	        console.log(flag);
	        if (IsReCenter == true)
	            return;
	        IsReCenter = true;
	        console.log('recenter');
	        //var startExtent = '';
	        //var strExtent = getCookie("mapextent");
	        //console.log("get cookie:"+strExtent);
	       // if (strExtent == null || strExtent == '') {
	        //    startExtent = new esri.geometry.Extent(DefaultExtent[0], DefaultExtent[1], DefaultExtent[2], DefaultExtent[3], map.spatialReference);
	        //}
	        //else {
	        //    var strs = new Array(); //定义一数组 
	        //    strs = strExtent.split(","); //字符分割 
	        //    if (strs[0] == NaN || isNaN(strs[1]) || isNaN(strs[2]) || isNaN(strs[3])) {
	        //        startExtent = new esri.geometry.Extent(DefaultExtent[0], DefaultExtent[1], DefaultExtent[2], DefaultExtent[3], map.spatialReference);
	        //    }
	        //    else {
	        //        startExtent = new esri.geometry.Extent(strs[0], strs[1], strs[2], strs[3], map.spatialReference);
	        //    }

	        //    map.setExtent(startExtent);
	        //}

	        //return;

	        var query = new esri.tasks.Query();
	        //把需要查询的底图服务加载进来  
	        var queryTask = new esri.tasks.QueryTask(MapServer + "/0");
	        //需要返回Geometry  
	        query.returnGeometry = true;
	        //需要返回的字段  
	        query.outFields = ["*"];
	        //设置查询条件，buildNo是之前DOM操作时从信息内容里取出来的  
	        //query.where = "行政镇编码 ='320507100'";
	        query.where = "OBJECTID=1";
	        //进行查询  
	        queryTask.execute(query, function (res) {
	            var fea = res.features[0];
	            //获取查询到的所有geometry的Extent用来设置查询后的地图显示  
	            var showExtent = fea.geometry.getExtent();
	            //设置地图的视图范围  
	            map.setExtent(showExtent.expand(1));

	        });
	    }
	    //开启定位
	    function StartPosition(dkbm) {

	        var query = new esri.tasks.Query();
	        //把需要查询的底图服务加载进来  
	        var queryTask = new esri.tasks.QueryTask(MapServer + "/20");
	        //需要返回Geometry  
	        query.returnGeometry = true;
	        //需要返回的字段  
	        query.outFields = ["*"];
	        //设置查询条件，buildNo是之前DOM操作时从信息内容里取出来的  
	        query.where = "地块编码 ='" + dkbm + "'";
	        //进行查询  
	        queryTask.execute(query, function (res) {
	            SetPosVisible(false);
	            var showExtent;
	            for (var i = 0; i < res.features.length; i++) {
	                var fea = res.features[i];
	                var point = fea.geometry.getExtent().getCenter();

	                //设置信息模板infoWindow  
	                map.infoWindow.setTitle("企业信息");
	                map.infoWindow.setContent("<p>" + fea.attributes["用地单位名称"] + "</p>");
	                //把信息模板显示在中心点上  
	                map.infoWindow.show(point);
	                //查询结果样式  
	                try {
	                    var symbol = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID,
                            new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0, 0.8]), 1),
                            new dojo.Color([125, 125, 125, 0.35]));
	                }
	                catch (e) {
	                    alert(e);
	                }
	                var graphic = new esri.Graphic();
	                graphic.setGeometry(fea.geometry);
	                //设置查询到的graphic的显示样式  
	                graphic.setSymbol(symbol);
	                //把查询结果添加到map.graphics中进行显示  
	                map.graphics.add(graphic);

	                var simpleMarkerSymbol1 = new esri.symbol.SimpleMarkerSymbol();
	                var graphic1 = new esri.Graphic(point, simpleMarkerSymbol1);

	                map.graphics.clear();
	                map.graphics.add(graphic1);


	                //获取查询到的所有geometry的Extent用来设置查询后的地图显示  
	                if (i == 0) {
	                    showExtent = fea.geometry.getExtent();
	                } else {
	                    showExtent = showExtent.union(fea.geometry.getExtent());
	                }

	                //设置地图的视图范围  
	                map.setExtent(showExtent.expand(3));
	            }
	        });
	    }

	    //根据叠加判断需要显示的图层索引
	    function getDjLayers() {
	        var DjLayerCount = 0;
	        for (var i = 0; i < Djlayers.length; i++) {
	            DjLayerCount++;
	        }
	        var tmpDjLayers = [];
	        if (Djlayers.contains('历年批次')) {
	            tmpDjLayers.push('历年批次');
	        }
	        if (Djlayers.contains('城市规划')) {
	            tmpDjLayers.push('城市规划');
	        }
	        if (Djlayers.contains('土地规划')) {
	            tmpDjLayers.push('土地规划');
	        }
	        if (Djlayers.contains('土地现状')) {
	            tmpDjLayers.push('土地现状');
	        }

	        var layindexs = [];
	        var dic_DjLayerAddrConfs = [];
	        dic_DjLayerAddrConfs['历年批次'] = [4, 4, 4, 4];
	        dic_DjLayerAddrConfs['城市规划'] = [7, 8, 9, 10];
	        dic_DjLayerAddrConfs['土地规划'] = [12, 13, 14, 15];
	        dic_DjLayerAddrConfs['土地现状'] = [20, 21, 22, 23];

	        if (GridVisibleLayerDisp == true) {//有影像
	            if (DjLayerCount == 1) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][1]);
	            }
	            else if (DjLayerCount == 2) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[1];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	            }
	            else if (DjLayerCount == 3) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[1];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[2];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	            }
	            else if (DjLayerCount == 4) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[1];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[2];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[3];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	            }
	        }
	        else {//无影像
	            if (DjLayerCount == 1) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][0]);
	            }
	            else if (DjLayerCount == 2) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][1]);
	                layname = tmpDjLayers[1];
	                layindexs.push(dic_DjLayerAddrConfs[layname][3]);
	            }
	            else if (DjLayerCount == 3) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[1];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[2];
	                layindexs.push(dic_DjLayerAddrConfs[layname][3]);
	            }
	            else if (DjLayerCount == 4) {
	                var layname = tmpDjLayers[0];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[1];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[2];
	                layindexs.push(dic_DjLayerAddrConfs[layname][2]);
	                layname = tmpDjLayers[3];
	                layindexs.push(dic_DjLayerAddrConfs[layname][3]);

	            }
	        }
	        return layindexs;
	    }

	    $(document).ready(function () {
	        var host = window.location.host;
	        if (host.substring(0, 9) == 'localhost') {
	            WebServer = 'http://' + host;
	        }
	        else {
	            WebServer = 'http://' + host + '/td_gis';
	        }
	        jpgForDitu = WebServer + '/themes/imgs/retPos.jpg';
            

	        setCookie("usesrname", 'admin');
	        setCookie("userpwd", '123456');
	        setCookie("userorg", '320507100');
	        var orgcode = getCookie("userorg");
	        initMap(orgcode);
	        document.onreadystatechange = completeLoading;

	        setTimeout('InitPosition(2)', 4000);
	        //企业定位不显示
	        SetPosVisible(false);

	    

	    });
	    function completeLoading() {

	        if (document.readyState == "complete") {
	            InitPosition(1);
	        }
	    }
	    Array.prototype.contains = function (needle) {
	        for (i in this) {
	            if (this[i] == needle) return true;
	        }
	        return false;
	    }
	    Array.prototype.indexOf = function (val) {
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] == val) return i;
	        }
	        return -1;
	    };

	    Array.prototype.remove = function (val) {
	        var index = this.indexOf(val);
	        if (index > -1) {
	            this.splice(index, 1);
	        }
	    };



	    function targetto(url) {
	        $("#showModal").modal({
	            remote: url
	        });
	    }


	    //4.每次隐藏时，清除数据。确保点击时，重新加载
	    $("#showModal").on("hidden.bs.modal", function () {
	        $(this).removeData("bs.modal");
	    });


	</script>

         <script type="text/javascript">


             //JS操作cookies方法!
             //写cookies
             function setCookie(name, value) {
                 var Days = 30;
                 var exp = new Date();
                 exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
                 document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
             }

             function getCookie(name) {
                 var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
                 if (arr = document.cookie.match(reg))
                     return unescape(arr[2]);
                 else
                     return null;
             }
             function delCookie(name) {
                 var exp = new Date();
                 exp.setTime(exp.getTime() - 1);
                 var cval = getCookie(name);
                 if (cval != null)
                     document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
             }
             //使用示例
             //setCookie("name", "hayden");
             //alert(getCookie("name"));
             //如果需要设定自定义过期时间
             //那么把上面的setCookie　函数换成下面两个函数就ok;
             //程序代码
             //////function setCookie(name, value, time) {
             //////    var strsec = getsec(time);
             //////    var exp = new Date();
             //////    exp.setTime(exp.getTime() + strsec * 1);
             //////    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
             //////}
             //////function getsec(str) {
             //////    alert(str);
             //////    var str1 = str.substring(1, str.length) * 1;
             //////    var str2 = str.substring(0, 1);
             //////    if (str2 == "s") {
             //////        return str1 * 1000;
             //////    }
             //////    else if (str2 == "h") {
             //////        return str1 * 60 * 60 * 1000;
             //////    }
             //////    else if (str2 == "d") {
             //////        return str1 * 24 * 60 * 60 * 1000;
             //////    }
             //////}
             //这是有设定过期时间的使用示例：
             //s20是代表20秒
             //h是指小时，如12小时则是：h12
             //d是天数，30天则：d30
             //setCookie("name", "hayden", "s20");

             var circle = new Sonic({

                 width: 50,
                 height: 50,
                 padding: 50,

                 strokeColor: '#000',

                 pointDistance: .01,
                 stepsPerFrame: 3,
                 trailLength: .7,

                 step: 'fader',

                 setup: function () {
                     this._.lineWidth = 5;
                 },

                 path: [
                     ['arc', 125, 125, 25, 0, 360]
                 ]

             });

        </script>  
	<script>
	    function SubmitQueryLtd() {
	        var ltdname = $("#ltdname").val();
	        if ($.trim(ltdname) == "") {
	            alert("查询条件不能为空!");
	            return;
	        }
	        var tbody = ""; //声明表格中body部分 
	        //$.getJSON(WebServer + "/lyRemoteserv/JsLtdQuery", [{ ltdname: '孙' }], showresult)

	        $.ajax({ //这里使用到Jquery的ajax方法
	            type: "Get",
	            dataType: "json",   //dataType: 'jsonp',//crossDomain: true,
	            url: WebServer + "/lyRemoteserv/JsLtdQuery", //请求的处理数据 
	            data: { ltdName: ltdname },
	            success: function (data) {
	                try {
	                    var testJson = data;//.serializeArray();// JSON.parse(json_string);// $.parseJSON(data);
	                    //testJson = JSON.stringify(testJson);// testJson.stringify();
	                    $("#LtdTable tr:gt(0)").remove();
	                    for (var i = 0; i < testJson.length; i++) {
	                        var trs = "";
	                        trs += "<tr><td align='center'>" + (i + 1) + "</td><td>"
                            //trs += testJson[i].地块编码 + "</td><td>"
                            + '<a href="#" onclick="StartPosition(' + "'" + testJson[i].dkbm + "'" + ')">' + testJson[i].name + '</a>'
                                + "" + "</td></tr>";
	                        tbody += trs;
	                    }
	                    $("#LtdTable").append(tbody);
	                    //altRows('LtdTable');
	                }
	                catch (e) { alert(e); }
	            }
	        });

	    }
	    function showresult(data) {
	        console.log(data);

	    }

	    function RetPos(id) {
	        FindPos();
	    }
	    function locationError(error) {
	        switch (error.code) {
	            case error.TIMEOUT:
	                alert("超时，请重试!");
	                break;
	            case error.POSITION_UNAVAILABLE:
	                alert('对不起，不能检测您的位置!');
	                break;
	            case error.PERMISSION_DENIED:
	                alert('定位被拒绝，请允许定位.');
	                break;
	            case error.UNKNOWN_ERROR:
	                alert('未知错误!');
	                break;
	            default:
	                alert('其他错误');
	        }
	    }
	    function locationSuccess(position) {
	        var coords = position.coords;
            
	        CurrPosition = coords.latitude + ',' + coords.longitude;
	        alert(CurrPosition);

	        if (webMercatorUtils.canProject(pt, map)) {
	            result = webMercatorUtils.project(pt, map);
	        }
	        //var latlng = new google.maps.LatLng(
	        //    // 维度
	        //    coords.latitude,
	        //    // 精度
	        //    coords.longitude
	        //);
	        //在图中显示位置
	        //alert(coords.longitude);
	    }
	    function FindPos() {
	        if (navigator.geolocation) {
	            navigator.geolocation.getCurrentPosition(locationSuccess, locationError, {
	            //navigator.geolocation.watchPosition(locationSuccess, locationError, {
	                // 指示浏览器获取高精度的位置，默认为false
	                enableHighAccuracy: true,
	                // 指定获取地理位置的超时时间，默认不限时，单位为毫秒
	                timeout: 5000,
	                // 最长有效期，在重复获取地理位置时，此参数指定多久再次获取位置。
	                maximumAge: 3000
	            });
	        } else {
	            alert("对不起，您的设备不支持定位!");
	        }
	    }
    </script>
</head>

<body>
<div id="app"> 
 	<div id="container">
              <div class="btn-group" role="group" style="float:right">
					    <!--<button type="button" class="btn btn-default" id="toggle-right">
						    <span class="glyphicon glyphicon-list-alt"></span>
					    </button>-->
                        <button id="btnDt" type="button" onclick="RetPos(id)"  class="btn btn-default retPosBtn">　</button>
					    
					    <button id="btnTdxz" type="button" onclick="btnDispLayer(id,'土地现状')"  class="btn btn-default layerdisp">现</button>
					    <button id="btnFw" type="button" onclick="btnDispLayer(id,'房屋建筑')" class="btn btn-default layernodisp">房</button>
					    <button id="btnLnpc" type="button" onclick="btnDispLayer(id,'历年批次')" class="btn btn-default  layernodisp">批</button>
					    <button id="btnTdgh" type="button" onclick="btnDispLayer(id,'土地规划')" class="btn btn-default layernodisp">土</button>
					    <button id="btnCsgh" type="button" onclick="btnDispLayer(id,'城市规划')" class="btn btn-default layernodisp">城</button>
				  	    <button id="btnYx" type="button" onclick="btnDispLayer(id,'影像')" class="btn btn-default layernodisp">影</button>
				  	    <!--<button id="Button1" type="button" onclick="MenuClick('401','土地现状')"class="btn btn-default">测试</button>
				-->
                       </div>
         <div id="map">	
           	     
			
		        </div>
        
            <!--<div data-role="widget" data-widget="nav4" class="nav4">//不触发map click-->
            <div  class="nav4">
	            <nav>
		            <div id="nav4_ul" class="nav_4" style="color:yellow">
			            <ul class="box">
				            <li>
					            <a href="javascript:;" class="" id="FunGroup1"><span>企业统计</span></a>
					            <dl>
						            <dd><a href="#"  class="menuitem"><span  onclick="MenuClick(id,'镇界')" id="101">镇统计</span></a></dd>
		                            <dd><a href="#" class="menuitem"><span   onclick="MenuClick(id,'村界')" id="102">村统计</span></a></dd>
                                    @* <dd><a href="#"  class="menuitem"><span  onclick="MenuClick(id,'基本农田核查')" id="101">基本农田核查</span></a></dd>
		                             <dd><a href="#" class="menuitem"><span   onclick="MenuClick(id,'建设管制核查 ')" id="102">建设管制核查 </span></a></dd>
					                 <dd><a href="#" class="menuitem"><span   onclick="MenuClick(id,'城市规划核查')" id="103">城市规划核查</span></a></dd>
					                 <dd><a href="#" class="menuitem"><span   onclick="MenuClick(id,'核查返回')" id="10４">返回</span></a></dd>
                                    *@
					            </dl>
				            </li>
				            <li>
					       <!--     <a href="#"   data-toggle="modal" data-target="#PosLtd" ><span  onclick="MenuClick(id)" id="301">企业定位</span></a>
    			           --> 
                                  <a href="#"><span  onclick="MenuClick(id)" id="301">企业定位</span></a>
    			           
				            </li>
				            <li>
					            <a href="javascript:;" class="off" id="FunGroup4"><span>属性查询</span></a>
					            <dl>
                                    <dd>	<a href="#" class="menuitem"><span   onclick="MenuClick(id,'土地现状')" id="401">土地现状</span></a>	</dd>
						            <dd>	<a href="#" class="menuitem"><span onclick="MenuClick(id,'历年批次')" id="403">历年批次</span></a></dd>	
						            <dd>	<a href="#" class="menuitem"><span onclick="MenuClick(id,'城市规划')" id="402">城市规划</span></a>	</dd>
						            <dd>	<a href="#" class="menuitem"><span  onclick="MenuClick(id,'土地规划')" id="404">土地规划</span></a></dd>	
						            <dd>	<a href="#" class="menuitem"><span  onclick="MenuClick(id,'房屋建筑')" id="405">房屋建筑建筑</span></a></dd>	
					            @*    <dd>	<a href="#" class="menuitem"><span   onclick="MenuClick(id,'企业信息')" id="406">企业信息</span></a>	</dd>
						            <dd>	<a href="#" class="menuitem"><span  onclick="MenuClick(id,'未供、建设项目')" id="407">未供、建设项目</span></a></dd>	
					                <dd>	<a href="#" class="menuitem"><span  onclick="MenuClick(id,'违法用地')" id="408">违法用地</span></a></dd>	
					          *@  </dl>
				            </li>
			
			            </ul>
		            </div>
	            </nav>
	
	           <!-- <div id="nav4_masklayer" class="masklayer_div on">&nbsp;</div>-->
                <script src="~/Scripts/QyTech/nav4.js"></script>
                <script type="text/javascript">
                    nav4.bindClick(document.getElementById("nav4_ul").querySelectorAll("li>a"), document.getElementById("nav4_masklayer"));
                </script>
            </div>



       </div>
	   <!-- <div class="modal fade" id="PosLtd">
			<div class="modal-dialog">
			    <div class="modal-content">-->
				    <div class="div100 title" id="LtdPos" style="display:none">
					<!--<form action="/lyRemote/AppLtdQuery" method="post">-->
							<div class="div100 yellow"><a href="javascript:" style="float:left"  onclick="SetPosVisible(false);"> <span class="btnReturn" style="color:white"> 返回 </span></a>企业名称:</div>
							<div class="div70">
								<div style="width: 70%; float: left;">
									<input type="text" style="color:black" name="ltdname" id="ltdname" value=""/>
								</div>
							</div>
							<div>
								<input id="postQuery" style="width:15%;color:black" type="button" onclick="SubmitQueryLtd();" value="查询"/>
							</div>
						
					<!--</form>-->
					<div>
						<div id="content" class="div100">
							<table class="altrowstable" id="LtdTable" style="width:inherit">
								<thead>
									<tr style="background-color:#036C85;color:yellow;">
										<th ></th>
										<th style="text-align:center; vertical-align:middle">用地单位名称</th>
									</tr>
								</thead>
								<tbody>
									<tr> 
											
									</tr>
								</tbody>
							</table>
					    </div>
				    </div>
			   <!-- </div>
		    </div>
		</div>-->
     </div>

    <div>
        <div class="modal fade" id="divLoadPage" >
		    <div class="modal-dialog" style="background-color:blue">
			    <div class="modal-content" style="width:100%; height:1400px;background-color:blue">
			       <div class="modal-body">
			          
			
				    </div>
			    </div>
		    </div>
	    </div>
    </div> 

        <div>
        <div class="modal fade" id="divSettingTransparent" >
		    <div class="modal-dialog" style="background-color:blue">
			    <div class="modal-content" style="width:100%; height:400px;background-color:blue">
                    <div class="modal-header"
                    
                    </div>
			       <div class="modal-body">
                        <div class="div100">
                            规划基本农田保护区:<input id="st_hgjbntbhq" type="range" step="10" min="0" max="100" value="40"/>
                            面 状 基 础 设 施:<input id="st_mzjcss" type="range" step="10" min="0" max="100" value="40"/>
                            建设用地管制区:<input id="st_jsydgzq" type="range" step="10" min="0" max="100" value="40"/>
                            城市规划:<input id="st_csgh" type="range" step="10" min="0" max="100" value="40"/>
						</div>
                        <div>
							<input id="postSetTrans" style="width:15%;color:black" type="button" onclick="SubmitSetTrans();" value="确定"/>
						</div>
			            
				    </div>
			    </div>
		    </div>
	    </div>
    </div> 
    <a href="#" id="aLoadPage" data-toggle='modal'   data-target='#divLoadPage' data-backdrop="static"  onclick="ShowModel()"></a>
	

</div> <!-- #app END -->
     	
    <script>
        //circle.play();

        document.body.appendChild(circle.canvas);
        //document.onreadystatechange = completeLoading;
        //function completeLoading() {

        //    if (document.readyState == "complete") {

        //        document.body.removeChild(circle.canvas);
        //        //var loadingMask = document.getElementById(‘loadingDiv’);
        //        //loadingMask.parentNode.removeChild(loadingMask);

        //    }

        //}

        function ShowSettingTransModel(){
            $("#divSettingTransparent").modal({
                backdrop: 'static',
                keyboard: false
            });
            $("#divSettingTransparent").modal('show');
        }

        function ShowModel(url) {

            //$("onclick 一定要加一个a吗
            $("#divLoadPage").modal({
                remote: url,
                backdrop: 'static',
                keyboard: false
            });
            //$("#PosLtd11111").css("display","block");
            $("#divLoadPage").modal('show');
        }

        $("#divLoadPage").on("hidden.bs.modal", function () {
            $(this).removeData("bs.modal");
        });
        </script>
	</body>
</html>
